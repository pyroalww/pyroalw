<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pyroalw Handwriting Recognition Demo</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <style>
        :root {
            --primary-color: #ff6b6b;
            --secondary-color: #4ecdc4;
            --accent-color: #45b7d8;
            --background-color: #f7f7f7;
            --text-color: #333;
            --light-gray: #e0e0e0;
            --dark-gray: #757575;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--background-color);
            color: var(--text-color);
            line-height: 1.6;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        header {
            background-color: #fff;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            padding: 20px 0;
            position: relative;
        }

        .logo {
            position: absolute;
            top: 20px;
            left: 20px;
            font-size: 24px;
            font-weight: bold;
            color: var(--primary-color);
        }

        h1, h2, h3 {
            color: var(--primary-color);
        }

        .app-title {
            font-size: 2.5rem;
            text-align: center;
            margin-bottom: 20px;
        }

        .dashboard {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            margin-top: 20px;
        }

        .sidebar, .main-content {
            background: #fff;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            padding: 20px;
        }

        .sidebar {
            flex: 1;
            min-width: 250px;
        }

        .main-content {
            flex: 3;
            min-width: 300px;
        }

        .character-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(60px, 1fr));
            gap: 10px;
            margin-top: 20px;
        }

        .character-item {
            background-color: var(--light-gray);
            border-radius: 8px;
            padding: 10px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .character-item:hover {
            background-color: var(--primary-color);
            color: #fff;
        }

        .character-item.active {
            background-color: var(--primary-color);
            color: #fff;
        }

        .canvas-container {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            justify-content: space-between;
        }

        .canvas-box {
            flex: 1;
            min-width: 280px;
            text-align: center;
        }

        canvas {
            border: 2px solid var(--primary-color);
            border-radius: 8px;
            margin: 10px 0;
            cursor: crosshair;
        }

        .button {
            background-color: var(--primary-color);
            color: #fff;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 1rem;
            margin: 5px;
        }

        .button:hover {
            background-color: #e05c5c;
        }

        .button-secondary {
            background-color: var(--secondary-color);
        }

        .button-secondary:hover {
            background-color: #3dbdab;
        }

        .button-accent {
            background-color: var(--accent-color);
        }

        .button-accent:hover {
            background-color: #3da7c8;
        }

        .progress-container {
            margin: 15px 0;
        }

        .progress {
            height: 20px;
            background-color: var(--light-gray);
            border-radius: 10px;
            overflow: hidden;
        }

        .progress-bar {
            height: 100%;
            background-color: var(--secondary-color);
            width: 0%;
            transition: width 0.3s ease;
        }

        #notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px;
            border-radius: 5px;
            color: #fff;
            font-weight: bold;
            display: none;
            z-index: 1000;
        }

        .guide {
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            padding: 20px;
            margin-top: 20px;
        }

        .guide h2 {
            color: var(--primary-color);
            margin-bottom: 15px;
        }

        .guide ol {
            padding-left: 20px;
        }

        .guide li {
            margin-bottom: 10px;
        }

        footer {
            text-align: center;
            margin-top: 40px;
            padding: 20px;
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }

        .tooltip {
            position: relative;
            display: inline-block;
        }

        .tooltip .tooltiptext {
            visibility: hidden;
            width: 200px;
            background-color: #333;
            color: #fff;
            text-align: center;
            border-radius: 6px;
            padding: 5px;
            position: absolute;
            z-index: 1;
            bottom: 125%;
            left: 50%;
            margin-left: -100px;
            opacity: 0;
            transition: opacity 0.3s;
        }

        .tooltip:hover .tooltiptext {
            visibility: visible;
            opacity: 1;
        }

        #currentCharacter {
            font-size: 1.5rem;
            font-weight: bold;
            color: var(--primary-color);
            text-align: center;
            margin-bottom: 15px;
        }

        @media (max-width: 768px) {
            .dashboard {
                flex-direction: column;
            }

            .sidebar, .main-content {
                width: 100%;
            }

            .canvas-container {
                flex-direction: column;
            }

            .canvas-box {
                width: 100%;
            }

            .logo {
                position: static;
                text-align: center;
                margin-bottom: 10px;
            }
        }
    </style>
</head>
<body>
    <header>
        <div class="container">
            <div class="logo">Pyroalw</div>
            <h1 class="app-title">Smart Handwriting Recognition</h1>
        </div>
    </header>

    <main class="container">
        <div class="dashboard">
            <aside class="sidebar">
                <h2>Training Controls</h2>
                <button class="button" onclick="addNewCharacter()">
                    <span class="material-icons">add</span> Add New Character
                </button>
                <div class="character-grid" id="characterGrid"></div>
                <div class="stats-panel">
                    <h3>Training Statistics</h3>
                    <div id="trainingStats"></div>
                </div>
            </aside>

            <section class="main-content">
                <div id="currentCharacter"></div>
                <div class="canvas-container">
                    <div class="canvas-box">
                        <h2>Training Area</h2>
                        <canvas id="trainCanvas" width="280" height="280"></canvas>
                        <div>
                            <button class="button tooltip" onclick="saveDrawing()">
                                <span class="material-icons">save</span> Save
                                <span class="tooltiptext">Save the current drawing as a sample</span>
                            </button>
                            <button class="button button-accent tooltip" onclick="clearCanvas('train')">
                                <span class="material-icons">clear</span> Clear
                                <span class="tooltiptext">Clear the training canvas</span>
                            </button>
                        </div>
                        <div class="progress-container">
                            <div class="progress">
                                <div id="progressBar" class="progress-bar"></div>
                            </div>
                            <div id="progressText"></div>
                        </div>
                    </div>

                    <div class="canvas-box">
                        <h2>Test Area</h2>
                        <canvas id="testCanvas" width="280" height="280"></canvas>
                        <div>
                            <button class="button tooltip" onclick="analyze()">
                                <span class="material-icons">search</span> Analyze
                                <span class="tooltiptext">Analyze the drawn character</span>
                            </button>
                            <button class="button button-accent tooltip" onclick="clearCanvas('test')">
                                <span class="material-icons">clear</span> Clear
                                <span class="tooltiptext">Clear the test canvas</span>
                            </button>
                        </div>
                        <div id="result" class="stats-panel"></div>
                    </div>
                </div>
            </section>
        </div>

        <div class="guide">
            <h2>How to Use This Application</h2>
            <ol>
                <li>Click "Add New Character" to start training a new character.</li>
                <li>Select the character you want to train from the grid on the left.</li>
                <li>Draw the character in the Training Area canvas.</li>
                <li>Click "Save" to store the drawn character as a sample (5-25 samples per character).</li>
                <li>Repeat steps 3-4 to add more samples for better recognition.</li>
                <li>To test, draw a character in the Test Area canvas and click "Analyze".</li>
                <li>The application will show the top 3 most likely characters based on your training data.</li>
                <li>Use the "Export Model" and "Import Model" buttons to save or load your training data.</li>
            </ol>
        </div>
    </main>

    <footer>
        <p>Developed by Pyroalw | <a href="https://pyrollc.com.tr" target="_blank">pyrollc.com.tr</a></p>
        <div>
            <button class="button button-secondary tooltip" onclick="exportModel()">
                <span class="material-icons">file_download</span> Export Model
                <span class="tooltiptext">Save your current training data</span>
            </button>
            <input type="file" id="modelUpload" style="display: none" onchange="importModel(event)">
            <button class="button button-secondary tooltip" onclick="document.getElementById('modelUpload').click()">
                <span class="material-icons">file_upload</span> Import Model
                <span class="tooltiptext">Load previously saved training data</span>
            </button>
        </div>
    </footer>

    <div id="notification"></div>

    <script>
        let currentChar = '';
        let samples = {};
        let isDrawing = false;
        let lastX = 0;
        let lastY = 0;
        const MIN_SAMPLES = 5;
        const MAX_SAMPLES = 25;

        const trainCanvas = document.getElementById('trainCanvas');
        const testCanvas = document.getElementById('testCanvas');
        const trainCtx = trainCanvas.getContext('2d');
        const testCtx = testCanvas.getContext('2d');

        function setupCanvas(canvas) {
            const ctx = canvas.getContext('2d');
            ctx.lineWidth = 8;
            ctx.lineCap = 'round';
            ctx.strokeStyle = 'black';

            canvas.addEventListener('mousedown', startDrawing);
            canvas.addEventListener('mousemove', draw);
            canvas.addEventListener('mouseup', stopDrawing);
            canvas.addEventListener('mouseout', stopDrawing);
            canvas.addEventListener('touchstart', handleTouch);
            canvas.addEventListener('touchmove', handleTouch);
            canvas.addEventListener('touchend', stopDrawing);
        }

        function startDrawing(e) {
            isDrawing = true;
            [lastX, lastY] = getCoordinates(e);
        }

        function draw(e) {
            if (!isDrawing) return;
            const ctx = e.target.getContext('2d');
            const [x, y] = getCoordinates(e);
            
            ctx.beginPath();
            ctx.moveTo(lastX, lastY);
            ctx.lineTo(x, y);
            ctx.stroke();
            [lastX, lastY] = [x, y];
        }

        function stopDrawing() {
            isDrawing = false;
        }

        function getCoordinates(e) {
            const rect = e.target.getBoundingClientRect();
            const x = e.clientX || e.touches[0].clientX;
            const y = e.clientY || e.touches[0].clientY;
            return [
                x - rect.left,
                y - rect.top
            ];
        }

        function handleTouch(e) {
            e.preventDefault();
            const touch = e.touches[0];
            const mouseEvent = new MouseEvent(e.type === 'touchstart' ? 'mousedown' : 'mousemove', {
                clientX: touch.clientX,
                clientY: touch.clientY
            });
            e.target.dispatchEvent(mouseEvent);
        }

        function addNewCharacter() {
            const char = prompt('Enter the character you want to train:');
            if (!char) return;
            
            if (!samples[char]) {
                samples[char] = [];
                updateCharacterGrid();
                showNotification(`Character "${char}" added`, 'success');
            }
            selectCharacter(char);
        }

        function selectCharacter(char) {
            currentChar = char;
            updateCharacterGrid();
            updateProgress();
            document.getElementById('currentCharacter').textContent = `Training: ${char}`;
        }

        function updateCharacterGrid() {
            const grid = document.getElementById('characterGrid');
            grid.innerHTML = Object.keys(samples).map(char => `
                <div class="character-item ${char === currentChar ? 'active' : ''}"
                     onclick="selectCharacter('${char}')">
                    ${char}<br>
                    <small>${samples[char].length}/${MAX_SAMPLES}</small>
                </div>
            `).join('');
        }

        function saveDrawing() {
            if (!currentChar) {
                showNotification('Please select a character first', 'warning');
                return;
            }

            if (samples[currentChar].length >= MAX_SAMPLES) {
                showNotification(`Maximum number of samples (${MAX_SAMPLES}) reached for this character`, 'warning');
                return;
            }

            const imageData = trainCtx.getImageData(0, 0, trainCanvas.width, trainCanvas.height);
            samples[currentChar].push(imageData);
            updateProgress();
            updateCharacterGrid();
            clearCanvas('train');
            showNotification(`Sample saved (${samples[currentChar].length}/${MAX_SAMPLES})`, 'success');
        }

        function clearCanvas(type) {
            const canvas = type === 'train' ? trainCanvas : testCanvas;
            const ctx = canvas.getContext('2d');
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            if (type === 'test') {
                document.getElementById('result').innerHTML = '';
            }
        }

        function exportModel() {
            const modelData = JSON.stringify(samples);
            const blob = new Blob([modelData], {type: 'application/json'});
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'handwriting-model.json';
            a.click();
            URL.revokeObjectURL(url);
            showNotification('Model successfully exported', 'success');
        }

        function importModel(event) {
            const file = event.target.files[0];
            if (!file) return;

            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    samples = JSON.parse(e.target.result);
                    updateCharacterGrid();
                    updateProgress();
                    showNotification('Model successfully imported', 'success');
                } catch (error) {
                    showNotification('Error loading model', 'error');
                }
            };
            reader.readAsText(file);
        }

        function updateProgress() {
            if (!currentChar) return;
            
            const progress = (samples[currentChar].length / MAX_SAMPLES) * 100;
            document.getElementById('progressBar').style.width = `${progress}%`;
            document.getElementById('progressText').innerHTML = 
                `${samples[currentChar].length}/${MAX_SAMPLES} samples for "${currentChar}"`;
        }

        function showNotification(message, type = 'success') {
            const notification = document.getElementById('notification');
            notification.textContent = message;
            notification.style.display = 'block';
            notification.style.backgroundColor = type === 'success' ? '#4CAF50' : 
                                                 type === 'warning' ? '#FFC107' : '#f44336';
            setTimeout(() => {
                notification.style.display = 'none';
            }, 3000);
        }

        function analyze() {
            if (Object.keys(samples).length === 0) {
                showNotification('Please train some characters first', 'warning');
                return;
            }

            const testImageData = testCtx.getImageData(0, 0, testCanvas.width, testCanvas.height);
            let bestMatches = [];

            for (let char in samples) {
                for (let sample of samples[char]) {
                    const similarity = compareImages(testImageData, sample);
                    bestMatches.push({char, similarity});
                }
            }

            bestMatches.sort((a, b) => b.similarity - a.similarity);
            const top3 = bestMatches.slice(0, 3);

            document.getElementById('result').innerHTML = `
                <h3>Most Likely Characters:</h3>
                ${top3.map((match, index) => `
                    <div style="margin: 10px 0;">
                        <div style="display: flex; justify-content: space-between; margin: 5px 0;">
                            <strong>${index + 1}. ${match.char}</strong>
                            <span>${(match.similarity * 100).toFixed(1)}% match</span>
                        </div>
                        <div class="progress">
                            <div class="progress-bar" style="width: ${match.similarity * 100}%"></div>
                        </div>
                    </div>
                `).join('')}
            `;
        }

        function compareImages(img1, img2) {
            const data1 = img1.data;
            const data2 = img2.data;
            let matchingPixels = 0;
            let totalPixels = 0;

            for (let i = 0; i < data1.length; i += 4) {
                if (data1[i + 3] > 0 && data2[i + 3] > 0) {
                    matchingPixels++;
                }
                if (data1[i + 3] > 0 || data2[i + 3] > 0) {
                    totalPixels++;
                }
            }

            return totalPixels > 0 ? matchingPixels / totalPixels : 0;
        }

        setupCanvas(trainCanvas);
        setupCanvas(testCanvas);
        updateCharacterGrid();
        updateProgress();
    </script>
</body>
</html>

